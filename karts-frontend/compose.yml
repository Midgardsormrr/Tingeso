services:
  db:
    image: postgres:latest
    environment:
      POSTGRES_DB: Karts
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123456
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend-network
    healthcheck:  # Healthcheck para PostgreSQL
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  frontend1:
    image: dguerra15/karts-frontend:latest
    networks:
      - frontend-network

  frontend2:
    image: dguerra15/karts-frontend:latest
    networks:
      - frontend-network

  frontend3:
    image: dguerra15/karts-frontend:latest
    networks:
      - frontend-network

  backend1:
    image: dguerra15/karts-backend:latest
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/Karts
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: 123456
    ports:
      - 8091:8090
    networks:
      - backend-network
    depends_on:
      db:
        condition: service_healthy  # Espera a que PostgreSQL est√© listo
    command: ["./wait-for-it.sh", "db:5432", "--", "java", "-jar", "app.jar"]  # Usa wait-for-it.sh

  backend2:
    image: dguerra15/karts-backend:latest
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/Karts
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: 123456
    ports:
      - 8092:8090
    networks:
      - backend-network
    depends_on:
      db:
        condition: service_healthy
    command: ["./wait-for-it.sh", "db:5432", "--", "java", "-jar", "app.jar"]

  backend3:
    image: dguerra15/karts-backend:latest
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/Karts
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: 123456
    ports:
      - 8093:8090
    networks:
      - backend-network
    depends_on:
      db:
        condition: service_healthy
    command: ["./wait-for-it.sh", "db:5432", "--", "java", "-jar", "app.jar"]

  nginx-frontend:
    image: nginx:latest
    ports:
      - "8070:80"
    volumes:
      - ./nginx-frontend.conf:/etc/nginx/nginx.conf
    depends_on:
      - frontend1
      - frontend2
      - frontend3
    networks:
      - frontend-network

  nginx-backend:
    image: nginx:latest
    ports:
      - "8090:8090"
    volumes:
      - ./nginx-backend.conf:/etc/nginx/nginx.conf
    depends_on:
      - backend1
      - backend2
      - backend3
    networks:
      - backend-network
      - frontend-network  # Conectado a ambas redes

networks:
  frontend-network:
  backend-network:

volumes:
  postgres_data: